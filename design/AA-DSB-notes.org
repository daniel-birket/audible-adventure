# See https://orgmode.org
#+TITLE: Daniel Birket's Notes
#+SUBTITLE: Audible-Adventure
#+LATEX_HEADER: \usepackage[margin=1.0in]{geometry}
#+LATEX_HEADER: \usepackage{parskip}
#+begin_abstract
This is Daniel Birket's log and notes on the Audible-Adventure project.
#+end_abstract
* Recent

This section contains recent log entries.

- [2022-09-10 Sat] It's been a month?

  - I finally got a moment today and talked with Lawrence about audio
    libraries. We reviewed my audio library notes and read about some
    other ones, adding them to the notes. We settled on the PySDL2
    wrapper for SDL2. It has simple audio playback and mixing
    functions that we need and has a public domain license. Two other
    libraries OpenAL and SoundLib/Bass support 3D audio, which are
    intriguing but too much for this student project and the simple
    command-line/audio concept.

  - Next moves are to figure out how to install and use the
    library. We should try some sandbox experiments to learn to use it.

- [2022-08-11 Thu] Reading

  - Read about some audio library, taking notes below
  - Wrote a message @ spamming several GitHub users with similar interests
  - Question to LP for his thoughts on sound formats.

- [2022-08-10 Wed] Initial Commit

  - Read about current practice for python projects and created a
    bare-bones repository folder structure.
  - Found original FORTRAN source code from Will Crother and also Don
    Wood's version. Studied analysis by Dennis Jerz.
  - Started to study translation to Literate Programming style by Don Wood.

* Log

This section contains archived log entries.
# Cut/Paste these lines above the recent log entries to archive them.

- End of Log

* Notes

** Analysis of the Original FORTRAN ADVENT

This section lists references on the original FORTRAN versions of
ADVENT (ADV) and includes some notes on data structures as I read.

- Don Wood's [[https://jerz.setonhill.edu/intfic/colossal-cave-adventure-source-code/][Source code]]
- [[http://www.digitalhumanities.org/dhq/vol/001/2/000009/000009.html#section02][Analysis]] by [[mailto:jerz_at_setonhill_dot_edu][Dennis G. Jerz]], Seton Hill University
- [[http://www.literateprogramming.com/adventure.pdf][Literate Translation]] of ADVENT by Don Wood

*** ADVENT Data

Scenes are either a place and/or a condition (you drowned)

- For each scene:
  - Long Scene Description
  - Short Scene Description
  - List Keywords (and its synonyms) to change to another scene
  - Most movements are object references, not compass points
- Words
  - Words have synonym-words and a key-word
  - Movement Words and synonyms
  - Object Words and synonyms
  - Action Words and synonyms
    - Default response
  - Message Words
    - Associated message(s)
- Objects and Treasures
  - Name
- Map Movement
  - Motion Word
  - Destination
  - Condition
    - Probability
    - Must have Object in Hand
    - Object must be Present
    - Object must have given property

** Audio Libraries
This section contains notes and links on some python-compatible audio
library to consider for this project.
*** Lucia

I found a 'lucia' folder among my downloaded repositories dated
2022-03-11. Although I don't remember it, I have apparently run into
the idea of an audio game engine before, probably while looking for
stuff of interest to Lawrence.

- [[https://github.com/luciasoftware/lucia]['lucia' repository]]

I have little memory of this and probably never took the time to
build the docs. At a glance, I have the impression that this is a
library upon which to build an audio-centric game. The example 'games'
are very short, one literally a 'Hello World' demo that appear to be
focused on exercising elements of the library, probably audio.

The development and master branches were abandoned two years ago.
It appears that they got about as far toward a useful product as I
realistically expect to get with the audible-adventure exercise.

See https://amerikranian.github.io/Python-guide/game_frameworks.html

*** PySDL2

A pure python ctypes wrapper for Simple DirectMedia Layer. These 'mixer' calls are under
the PyGame calls for 'mixer'. See https://pysdl2.readthedocs.io/en/0.9.13/tutorial/pygamers.html

| pygame.mixer       | sdl2                                                               |
|--------------------+--------------------------------------------------------------------|
| init()             | sdl2.sdlmixer.Mix_Init()                                           |
| quit()             | sdl2.sdlmixer.Mix_Quit()                                           |
| get_init()         | No equivalent planned                                              |
| stop()             | sdl2.sdlmixer.Mix_HaltChannel(),                                   |
|                    | sdl2.sdlmixer.Mix_HaltGroup(), sdl2.sdlmixer.Mix_HaltMusic()       |
| pause()            | sdl2.sdlmixer.Mix_Pause(), sdl2.sdlmixer.Mix_PauseMusic()          |
| unpause()          | sdl2.sdlmixer.Mix_Resume(), sdl2.sdlmixer.Mix_ResumeMusic()        |
| fadeout()          | sdl2.sdlmixer.Mix_FadeOutChannel(),                                |
|                    | sdl2.sdlmixer.Mix_FadeOutGroup(), sdl2.sdlmixer.Mix_FadeOutMusic() |
| set_num_channels() | sdl2.sdlmixer.Mix_AllocateChannels()                               |
| get_num_channels() | sdl2.sdlmixer.Mix_AllocateChannels()                               |
| set_reserved()     | sdl2.sdlmixer.Mix_ReserveChannels()                                |
| find_channel()     | No equivalent planned                                              |
| get_busy()         | sdl2.sdlmixer.Mix_ChannelFinished()                                |
| Sound              | sdl2.sdlmixer.Mix_Chunk                                            |
| Channel            | No equivalent, use the channel functions instead                   |

See https://pysdl2.readthedocs.io/en/0.9.13/modules/sdl2_sdlmixer.html
for the python wrapper (which has incomplete documentation)

and https://wiki.libsdl.org/SDL_mixer/FrontPage for the complete C library

*** Bass

@TheQuinbox recommends Bass and sound_lib over SDL2.

This appears to be a commercial sound library with a free license for
not-for-profit projects like this.

https://www.un4seen.com

*** sound_lib

High-level Python Wrapper for Bass library.

https://github.com/accessibleapps/sound_lib

Not a lot of documentation. Will have to read the code.

*** FMOD

High $ commercial sound framework. Inappropriate for a beginner
project, but looks very nice.

https://fmod.com

*** Synthizer

[[https://github.com/synthizer/synthizer][Synthizer GitHub]]

Pre 1.0 work in progress. Sounds promising. Read the Read.me.

*** Cytolk

Cython wrapper for the tolk library. Mentions screenreader. This and
[[https://github.com/dkager/tolk/][Tolk]] appear to be Windows-only.
[[https://github.com/pauliyobo/cytolk][Cython GitHub]]

*** OpenAL

Open Audio Library
[[https://openal.org]]
3D audio imaging with sources and listeners moving in 3D space.

*** BGT

This appears to be a defunct audio-game script language and engine.

"BGT is a new revolutionary toolkit which allows you to produce your
own audio games from the ground up, without having any prior knowledge
of computer programming at all."

"The development of bgt stopped working: since a long time ago, the
development of bgt which is blastbay game toolkit stopped
working. however, the bgt is not been deleted, you can still code with
the latest features in version 1.3. but now python will be a good and
best programming language for games development, but still, good to
keep it up for a while, bgt!"

"If you are learning bgt and python together, then I recommend you not
to learn bgt, since you're already learning python, a good or best
programming language."

